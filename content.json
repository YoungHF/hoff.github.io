{"meta":{"title":"Hoff's blog","subtitle":null,"description":null,"author":"Hoff","url":"http://yoursite.com/younghf.github.io"},"pages":[{"title":"about","date":"2017-11-30T03:04:47.000Z","updated":"2017-11-30T07:12:40.967Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/younghf.github.io/about/index.html","excerpt":"","text":"征服自己的一切弱点，正是一个人伟大的起始！ — Hoff·Young 折腾了许久，终于搭好了自己的博客。希望自己能坚持写下去吧，记录学习中的一点一滴，直到有一天，量变引起质变！"}],"posts":[{"title":"CSS文本","slug":"CSS文本","date":"2017-12-05T04:01:11.000Z","updated":"2017-12-05T08:05:37.416Z","comments":true,"path":"2017/12/05/CSS文本/","link":"","permalink":"http://yoursite.com/younghf.github.io/2017/12/05/CSS文本/","excerpt":"","text":"CSS 字体属性 属性 描述 font 简写属性。作用是把所有针对字体的属性设置在一个声明中。 font-family 设置字体系列。 font-size 设置字体的尺寸。 font-style 设置字体风格。 font-variant 以小型大写字体或者正常字体显示文本。 font-weight 设置字体的粗细。 以上具体的属性介绍在此不再赘述。 如上图，灰色的属性表示不常用，其中font-size、font-family为必填项，所以最后两种缩写的方式是不起作用的。 Line-height–行间距（行高） line-height: normal | &lt;number&gt; | &lt;length&gt; | &lt;percentage&gt; 注意：&lt;percentage&gt;是先计算后继承，是直接继承 Color 颜色 检索或设置对象的文本颜色。无默认值。 可以使用Color Name(颜色名称), HEX（十六进制颜色）, RGB, RGBA, HSL, HSLA, transparent来指定color。 注意，用颜色名称指定color 可能不被一些浏览器接受。 color 属性值被间接用来提供一个中间值currentColor 以供其他接受颜色值的属性使用。 示例：12div &#123; border: 10px solid; color: red;&#125; 如上代码，没有定义边框的颜色，但定义了color 的颜色为red，那么这时red 将会作为一个间接值currentColor 提供给边框颜色属性，所以最终边框色也为red。 Text-align 文本对齐方式 text-align 属性规定元素中的文本的水平对齐方式。只能针对文本文字和img 标签，对其他标签无效。 该属性通过指定行框与哪个点对齐，从而设置块级元素内文本的水平对齐方式。通过允许用户代理调整行内容中字母和字之间的间隔，可以支持值justify；不同用户代理可能会得到不同的结果。 属性 描述 默认值 如果direction 属性是ltr，则默认值是left；如果direction 是rtl，则为right。 left 把文本排列到左边。默认值：由浏览器决定。 right 把文本排列到右边。 center 把文本排列到中间。 justify 实现两端对齐文本效果。 inherit 规定应该从父元素继承text-align 属性的值。 vertical-align 垂直对齐方式 该属性定义行内元素的基线相对于该元素所在行的基线的垂直对齐。允许指定负长度值和百分比值。这会使元素降低而不是升高。在表单元格中，这个属性会设置单元格框中的单元格内容的对齐方式。 值 描述 baseline 默认。元素放置在父元素的基线上。 sub 垂直对齐文本的下标。 super 垂直对齐文本的上标 top 把元素的顶端与行中最高元素的顶端对齐 text-top 把元素的顶端与父元素字体的顶端对齐 middle 把此元素放置在父元素的中部。 bottom 把元素的顶端与行中最低的元素的顶端对齐。 text-bottom 把元素的底端与父元素字体的底端对齐。 length % 使用”line-height” 属性的百分比值来排列此元素。允许使用负值。 inherit 规定应该从父元素继承vertical-align 属性的值。 Text-indent 设置首行缩进 中文文字中的段前习惯空两个文字的空白，这个特殊的样式可以用下面代码来实现： 1p&#123;text-indent:2em;&#125; White-space white-space 属性设置如何处理元素内的空白（空白符）。 可能值 描述 normal 默认。空白会被浏览器忽略。丢掉多余的空白符，换行字符（回车）会转换为空格，一行中多个空格的序列也会转换为一个空格。 pre 空白会被浏览器保留。其行为方式类似HTML 中的&lt;pre&gt; 标签。 nowrap 文本不会换行，文本会在在同一行上继续，直到遇到&lt;br&gt; 标签为止。 pre-wrap 保留空白符序列，但是正常地进行换行。 pre-line 合并空白符序列，但是保留换行符。 inherit 规定应该从父元素继承white-space 属性的值。 white-space 属性的行为： 值 空白符 换行符 自动换行 pre-line 合并 保留 允许 normal 合并 忽略 允许 nowrap 合并 忽略 不允许 pre 保留 保留 不允许 pre-wrap 保留 保留 允许 Word-wrap word-wrap 属性允许长单词或 URL 地址换行到下一行。一般情况下，如果你开发的是英文网站，就很有可能用到word-wrap 这个属性了。 语法: word-wrap: normal | break-word; Word-break 设置或检索对象内文本的字内换行行为。 对于解决防止页面中出现连续无意义的长字符打破布局，应该使用break-all 属性值； 语法： word-break：normal | keep-all | break-all 默认值：normal 取值： normal：依照亚洲语言和非亚洲语言的文本规则，允许在字内换行。 keep-all：与所有非亚洲语言的normal 相同。对于中文，韩文，日文，不允许字断开。适合包含少量亚洲文本的非亚洲文本。 break-all：该行为与亚洲语言的normal 相同。也允许非亚洲语言文本行的任意字内断开。该值适合包含一些非亚洲文本的亚洲文本，比如使连续的英文字母间断行。 Text-decoration -文本修饰 属性值 说明 none 默认值，可以用这个属性值也可以去掉已经有下划线或删除线或顶划线的样式 underline 下划线 line-through 删除线 overline 顶划线 underline 会对元素加下划线，就像HTML 中的U 元素一样。overline 的作用恰好相反，会在文本的顶端画一个上划线。值line-through 则在文本中间画一个贯穿线，等价于HTML 中的S 和strike 元素。 none 值会关闭原本应用到一个元素上的所有装饰。通常，无装饰的文本是默认外观，但也不总是这样。 例如，链接默认地会有下划线。如果您希望去掉超链接的下划线，可以使用以下CSS 来做到这一点： 1a &#123;text-decoration: none;&#125; Text-shadow 文字阴影 语法：text-shadow:x-offset y-offset blur color; 说明： x-offset：（水平阴影）表示阴影的水平偏移距离，单位可以是px、em 或者百分比等。如果值为正，则阴影向右偏移；如果值为负，则阴影向左偏移； y-offset：（垂直阴影）表示阴影的垂直偏移距离，单位可以是px、em 或者百分比等。如果值为正，则阴影向下偏移；如果值为负，则阴影向上偏移； blur：（模糊距离）表示阴影的模糊程度，单位可以是px、em 或者百分比等。blur 值不能为负。如果值越大，则阴影越模糊；如果值越小，则阴影越清晰。当然，如果不需要阴影模糊效果，可以把blur 值设置为0； color：（阴影的颜色）表示阴影的颜色。 在CSS3 中，可以使用text-shadow 属性来给文字指定多个阴影，并且针对每个阴影使用不同的颜色。也就是说，text-shadow 属性可以为一个以英文逗号隔开的“值列表”，如：text-shadow:0 0 4px white, 0 -5px 4px #ff3, 2px -10px 6px #fd3;当text-shadow 属性值为“值列表”时，阴影效果会按照给定的值顺序应用到该元素的文本上，因此有可能出现互相覆盖的现象。但是text-shadow 属性永远不会覆盖文本本身，阴影效果也不会改变边框的尺寸。 text-stroke 属性 语法：text-stroke:宽度值颜色值; 在CSS3 中，我们可以使用text-stroke 属性为文字添加描边效果。这个描边效果，说白了就是给文字添加边框。 text-overflow 属性 在CSS3 中，文本溢出text-overflow 用于设置是否使用一个省略标记（…）标示对象内文本的溢出。 属性值 说明 ellipsis 当对象内文本溢出时显示省略标记（…） clip 当对象内文本溢出时不显示省略标记（…），而是将溢出的部分裁切掉 单独使用text-overflow 属性是无法得到上面图1 效果的。因为text-overflow 属性只是说明文字溢出时用什么方式显示，要实现溢出时产生省略号效果，还须定义2 个内容： （1）white-space:nowrap;（强制文本在一行内显示）； （2）overflow:hidden;（溢出内容为隐藏）； 下面是实现文字溢出时产生省略号效果的完整语法： ```text-overflow:ellipsis;overflow:hidden;white-space:nowrap;12345678910111213141516 这3个属性是必须一起使用才会有效果。&gt;### Cursor 属性 在CSS 中，使用cursor 属性来定义鼠标的样式。 语法：cursor:属性值; cursor 属性取值如下，默认值为default。在实际开发中，我们一般只用到“default”和“pointer”这两个属性值，其他的一般都很少用得上，无需记忆。![cursor.jpg](cursor.jpg)&gt;### Inherit 属性 该值使得属性能够继承祖先设置。 inherit 属于CSS-wide 关键字，这表示所有的属性都可以接受该值。 如何让一个不具备继承特性的属性可以继承父元素的定义？ 示例代码： ``` div &#123; position: relative; &#125; div a &#123; position: inherit; &#125; 上述代码，超链接a 将会继承父元素的position 定义，也会定义为relative。常用的CSS 属性继承性：","categories":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/younghf.github.io/categories/前端/"}],"tags":[{"name":"CSS文本","slug":"CSS文本","permalink":"http://yoursite.com/younghf.github.io/tags/CSS文本/"}],"keywords":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/younghf.github.io/categories/前端/"}]},{"title":"CSS选择器","slug":"CSS选择器","date":"2017-12-01T07:42:19.000Z","updated":"2017-12-01T16:33:25.437Z","comments":true,"path":"2017/12/01/CSS选择器/","link":"","permalink":"http://yoursite.com/younghf.github.io/2017/12/01/CSS选择器/","excerpt":"","text":"CSS 选择器 选择器，说白了就是用一种方式把你想要的那一个标签选中！把它选中了，你才能操作这个标签的CSS 样式。CSS 有很多把你所需要的标签选中的方式，这些不同的方式就是不同的选择器。 选择器的不同，在于它选择方式不同，但是他们的目的都是相同的，那就是把你需要的标签选中，然后让你定义该标签的CSS 样式。当然，你也有可能会用某一种选择器代替另一种选择器，这仅仅是由于选择方式不一样罢了，目的还是一样的。 标签选择器 标签选择器其实就是html 代码中的标签。例如下面代码： 1p&#123;font-size:12px;line-height:1.6em;&#125; 上面的css 样式代码的作用：为p 标签设置12px 字号，行间距设置1.6em 的样式。 类选择器 语法：.选择器名称{css 样式代码;} 1.selector&#123;color:red;&#125; 注意： 英文圆点开头 其中类选器名称可以任意起名（但不要起中文噢） ID 选择器 语法：#选择器名称{css 样式代码;} 1#selector&#123;color:red;&#125; 类和ID 选择器的区别 相同点：可以应用于任何元素 不同点： ID 选择器只能在文档中使用一次。与类选择器不同，在一个HTML 文档中，ID 选择器只能使用一次，而且仅一次。而类选择器可以使用多次。 可以使用类选择器词列表方法为一个元素同时设置多个样式。我们可以为一个元素同时设多个样式，但只可以用类选择器的方法实现，ID 选择器是不可以的（不能使用ID 词列表）。 通用选择器（通配符选择器） 通用选择器是功能最强大的选择器，它使用一个（*）号指定，它的作用是匹配html 中所有标签元素，如下使用下面代码使用html 中任意标签元素字体颜色全部设置为红色： 1*&#123;color:red;&#125; 属性选择器 选择器 描述 [attribute] 用于选取带有指定属性的元素。 [attribute=value] 用于选取带有指定属性和值的元素。 [attribute~=value] 用于选取属性值中包含指定词汇的元素。 [attribute丨=value] 用于选取带有以指定值开头的属性值的元素，该值必须是整个单词。 [attribute^=value] 匹配属性值以指定值开头的每个元素。 [attribute$=value] 匹配属性值以指定值结尾的每个元素。 [attribute*=value] 匹配属性值中包含指定值的每个元素。 实例展示： html 代码： 1&lt;a href=&quot;xxx.pdf&quot;&gt;我链接的是PDF 文件&lt;/a&gt; &lt;a href=&quot;#&quot; class=&quot;icon&quot;&gt;我类名是icon&lt;/a&gt; &lt;a href=&quot;#&quot; title=&quot;我的title 是more&quot;&gt;我的title 是more&lt;/a&gt; css 代码: 1a[class^=icon]&#123; background: green; color:#fff; &#125; a[href$=pdf]&#123; background: orange; color: #fff; &#125; a[title*=more]&#123; background: blue; color: #fff; &#125; 结果显示： 伪类选择器 CSS 伪类用于向某些选择器添加特殊的效果。又叫伪类选择符，它允许给html 不存在的标签（标签的某种状态）设置样式，比如说我们给html 中一个标签元素的鼠标滑过的状态来设置字体颜色： 1a:hover&#123;color:red;&#125; 属性 描述 CSS :focus 向拥有键盘输入焦点的元素添加样式。 2 :hover 当鼠标悬浮在元素上方时，向元素添加样式。 1 :link 向未被访问的链接添加样式。 1 :visited 向已被访问的链接添加样式。 1 :first-child 向元素的第一个子元素添加样式。 2 :lang 向带有指定lang 属性的元素添加样式。 2 :enabled 匹配每个启用的元素（主要用于表单元素）。 3 :disabled 匹配每个禁用的元素（主要用于表单元素）。 3 :checked 匹配每个已被选中的 input 元素（只用于单选按钮和复选框）。 3 结构伪类选择器 是针对HTML 层次“结构”的伪类选择器。例如我们想要某一个父元素下面的第n 个子元素。 总结： “:first-child”是选择父元素下的第1 个子元素（不区分元素类型），而“:first-of-type”是选择父元素下某个元素类型的第1 个子元素（区分元素类型）。 UI 元素状态伪类选择器 UI，是用户界面（User Interface）的意思。所谓的UI 设计是指对软件的人机交互、操作逻辑、界面美观的综合设计。 UI 元素状态包括：可用、不可用、选中、未选中、获取焦点、失去焦点等。这些选择器的共同特征是：指定的样式只有当元素处于某种状态下时才起作用，在默认状态下不起作用。UI 元素状态伪类选择器大多数都是针对表单元素来使用的。 选择器 说明 E:focus 指定元素获得光标焦点时使用的样式 E:checked 选择E 元素中所有被选中的元素 E::selection 改变E 元素中被选择的网页文本的显示效果 E:enabled 选择E 元素中所有“可用”元素 E:disabled 选择E 元素中所有“不可用”元素 E:read-write 选择E 元素中所有“可读写”元素 E:read-only 选择E 元素中所有“只读”元素 E::before 在E 元素之前插入内容 E::after 在E 元素之后插入内容 CSS 伪元素选择器 选择器 说明 ::first-letter 向文本的第一个字母添加特殊样式 ::first-line 向文本的首行添加特殊样式 ::before 在元素之前添加内容 ::after 在元素之后添加内容 ::selection 改变元素中被选择的网页文本的显示效果 CSS 组合选择器 子选择器: 即大于符号(&gt;),用于选择指定标签元素的第一代子元素。如下代码： 1.food&gt;li&#123;border:1px solid red;&#125; 这行代码会使class 名为food 下的子元素li 加入红色实线边框。 包含(后代)选择器: 即加入空格,用于选择指定标签元素下的后辈元素。如下代码： 1.first span&#123;color:red;&#125; 请注意这个选择器与子选择器的区别，子选择器（child selector）仅是指它的直接后代，或者你可以理解为作用于子元素的第一代后代。而后代选择器是作用于所有子后代元素。后代选择器通过空格来进行选择，而子选择器是通过“&gt;”进行选择。 **总结：** &gt;作用于元素的第一代后代，空格作用于元素的所有后代。 相邻选择器: 相邻选择器只会命中符合条件的相邻的兄弟元素，使用“+”号。 如：p+p{color:#f00;} 即设置与p 元素相邻的p 元素的颜色。 兄弟选择器 兄弟选择器会命中所有符合条件的兄弟元素，而不强制是紧邻的元素，使用“~”符号 如：p~p{color:#f00;} 群组选择器 群组选择器，就是同时对几个选择器进行相同的操作。 语法：h3,div,p,span{color:red;} CSS 继承 CSS 的某些样式是具有继承性的，那么什么是继承呢？继承是一种规则，它允许样式不仅应用于某个特定html 标签元素，而且应用于其后代。比如下面代码：如某种颜色应用于p 标签，这个颜色设置不仅应用p 标签，还应用于p 标签中的所有子元素文本，这里子元素为span 标签。 1p&#123;color:red;&#125; &lt;p&gt;三年级时，我还是一个&lt;span&gt;胆小如鼠&lt;/span&gt;的小女孩。&lt;/p&gt; 注意: 有一些css 样式是不具有继承性的。如border:1px solid red; 1p&#123;border:1px solid red;&#125; &lt;p&gt;三年级时，我还是一个&lt;span&gt;胆小如鼠&lt;/span&gt;的小女孩。&lt;/p&gt; 在上面例子中它代码的作用只是给p 标签设置了边框为1 像素、红色、实心边框线，而对于子元素span 是没用起到作用的。 CSS 优先级（特殊性） CSS 的优先级也可以称为CSS 的特殊性(specificity)或权值:对于每个样式表规则,浏览器都会计算选择器的特殊性,从而使元素属性声明在有冲突的情况下能够正确显示.有的时候我们为同一个元素设置了不同的CSS 样式代码，那么元素会启用哪一个CSS 样式呢? 我们来看一下面的代码： 1p&#123;color:red;&#125; .first&#123;color:green;&#125; &lt;p class=&quot;first&quot;&gt;三年级时，我还是一个&lt;span&gt;胆小如鼠&lt;/span&gt;的小女孩。&lt;/p&gt; p 和.first 都匹配到了p 这个标签上，那么会显示哪种颜色呢？green 是正确的颜色，那么为什么呢？是因为浏览器是根据权值来判断使用哪种css 样式的，权值高的就使用哪种css样式。 权值的规则：标签的权值为1，类选择符的权值为10，ID 选择符的权值最高为100。 例如下面的代码： 1p&#123;color:red;&#125; /*权值为1*/ p span&#123;color:green;&#125; /*权值为1+1=2*/ .warning&#123;color:white;&#125; /*权值为10*/ p span.warning&#123;color:purple;&#125; /*权值为1+1+10=12*/ \\#footer .note p&#123;color:yellow;&#125; /*权值为100+10+1=111*/ 注意：还有一个权值比较特殊—继承也有权值但很低，有的文献提出它只有0.1，所以可以理解为继承的权值最低。 如何改变CSS 的优先级？ 改变CSS 的先后顺序； 提升权重； 使用!important. CSS 层叠 层叠就是在html 文件中对于同一个元素可以有多个css 样式存在，当有相同权重的样式存在时，会根据这些css 样式的前后顺序来决定，处于最后面的css 样式会被应用。 如下面代码: 1p&#123;color:red;&#125; p&#123;color:green;&#125; &lt;p class=&quot;first&quot;&gt;三年级时，我还是一个&lt;span&gt;胆小如鼠&lt;/span&gt;的小女孩。&lt;/p&gt; 最后p 中的文本会设置为green，这个层叠很好理解，理解为后面的样式会覆盖前面的样式。 所以前面的css 样式优先级就不难理解了： 内联样式表（标签内部）&gt; 嵌入样式表（当前文件中）&gt; 外部样式表（外部文件中）。 重要性(!important) 我们在做网页代码的时，有些特殊的情况需要为某些样式设置具有最高权值，怎么办？ 这时候我们可以使用!important 来解决。 如下代码： 1p&#123;color:red!important;&#125; p&#123;color:green;&#125; &lt;p class=&quot;first&quot;&gt;三年级时，我还是一个&lt;span&gt;胆小如鼠&lt;/span&gt;的小女孩。&lt;/p&gt; 这时p 段落中的文本会显示的red 红色。 注意：!important 要写在分号的前面这里注意当网页制作者不设置css 样式时，浏览器会按照自己的一套样式来显示网页。并且用户也可以在浏览器中设置自己习惯的样式，比如有的用户习惯把字号设置为大一些，使其查看网页的文本更加清楚。这时注意样式优先级为： 浏览器默认的样式&lt; 网页制作者样式&lt; 用户自己设置的样式 但记住!important 优先级样式是个例外，权值高于用户自己设置的样式。 参考资料：http://www.quirksmode.org/css/selectors/","categories":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/younghf.github.io/categories/前端/"}],"tags":[{"name":"CSS选择器","slug":"CSS选择器","permalink":"http://yoursite.com/younghf.github.io/tags/CSS选择器/"}],"keywords":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/younghf.github.io/categories/前端/"}]},{"title":"CSS简介","slug":"CSS","date":"2017-12-01T05:22:24.000Z","updated":"2017-12-01T16:31:18.765Z","comments":true,"path":"2017/12/01/CSS/","link":"","permalink":"http://yoursite.com/younghf.github.io/2017/12/01/CSS/","excerpt":"","text":"CSS 简介 概念：CSS 全称为“层叠样式表(Cascading Style Sheets)”，它主要是用于定义HTML 内容在浏览器内的显示样式，如文字大小、颜色、字体加粗等。 在HTML 中引入CSS 共有3 种方式： 外部样式表 1&lt;head&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;mystyle.css&quot;&gt; &lt;/head&gt; 内部样式表 1&lt;style&gt; hr &#123;color:sienna;&#125; p &#123;margin-left:20px;&#125; body &#123;background-image:url(&quot;images/back40.gif&quot;);&#125; &lt;/style&gt; 内联样式表 由于要将表现和内容混杂在一起，内联样式会损失掉样式表的许多优势。请慎用这种方法，例如当样式仅需要在一个元素上应用一次时。1&lt;p style=&quot;color:sienna;margin-left:20px&quot;&gt;This is a paragraph.&lt;/p&gt; 层叠次序 当同一个HTML 元素被不止一个样式定义时，会使用哪个样式呢？一般而言，所有的样式会根据下面的规则层叠于一个新的虚拟样式表中，其中数字4 拥有最高的优先权。 浏览器缺省设置 外部样式表 内部样式表（位于&lt;head&gt;标签内部） 内联样式（在HTML元素内部） 内联样式&gt; 标签中的样式声明&gt; 外部样式表中的样式声明(或者浏览器中的样式声明（缺省值）) 1提示:如果你使用了外部文件的样式在&lt;head&gt;中也定义了该样式，则内部样式表会取代外部文件的样式。注意上面所总结的优先级是有一个前提：内联式、嵌入式、外部式样式表中css 样式是在的相同权值的 情况下。 CSS语法 CSS 规则由两个主要的部分构成：选择器，以及一条或多条声明: 选择器（selector）通常是您需要改变样式的HTML 元素。 每条声明(Declaration)由一个属性(property)和一个值(value)组成。在英文大括号“｛｝”中的的就是声明。 属性（property）是您希望设置的样式属性（style attribute）。每个属性有一个值。属性和值被冒号分开。 浏览器私有属性 由于CSS3 很多属性尚未成为W3C 标准的一部分，因此每种内核的浏览器都只能识别带有自身私有前缀的CSS3 属性。我们在书写CSS3 代码时，需要在属性前加上浏览器的私有前缀，然后该种内核的浏览器才能识别相应的CSS3 属性。 私有前缀 对应的浏览器 -webkit- chrome 和 safari -moz- Firefox -ms- IE -o- opera 举个例子，假如我们想要使用CSS3 实现半径为10px 的圆角效果的话，就需要这么写： border-radius:10px; -webkit-border-radius:10px; /兼容chrome 和Safari/ -moz-border-radius:10px; /兼容Firefox/ -ms-border-radius:10px; /兼容IE/ -o-border-radius:10px; /兼容opera/ CSS 属性值定义参考资源： https://developer.mozilla.org/zh-CN/docs/Web/CSSValue_definition_syntaxhttp://www.dreamdu.com/css/property_value/ @规则及语法 @media 指定样式表规则用于指定的媒体类型和查询条件。 IE8 及以下只能实现CSS2 中的部分，即只可以设置媒体类型。 代码示例： 1@media screen and (width:800px)&#123; … &#125; @import url(example.css) screen and (width:800px); @keyframes 指定动画名称和动画效果。 定义动画时，简单的动画可以直接使用关键字from 和to，即从一种状态过渡到另一种状态： 代码示例： 12345@keyframes testanimations &#123; from &#123; opacity: 1; &#125; to &#123; opacity: 0; &#125; &#125;@keyframes testanimations &#123; from &#123; transform: translate(0, 0); &#125; 20% &#123; transform: translate(20px, 20px); &#125; 40% &#123; transform: translate(40px, 0); &#125; 60% &#123; transform: translate(60px, 20); &#125; 80% &#123; transform: translate(80px, 0); &#125; to &#123; transform: translate(100px, 20px); &#125; &#125;当然，也可以不使用关键字from 和to，而都使用&lt;percentage&gt;，如将上面的示例代码中的“from”、“to”分别换成“0%”、“100%”。 @font-face 设置嵌入HTML 文档的字体。 需要兼容当前的主流浏览器， 需同时使用TureTpe(.ttf) 、Web Open Font Format(.woff)、Embedded Open Type(.eot)、SVG(.svg)四种字体格式。 嵌入HTML 文档的字体是指将OpenType 字体（压缩的TrueType 字体）文件映射到客户端系统，用来提供HTML 文档使用该字体，或取代客户端系统已有的同名字体。即让客户端显示客户端所没有安装的字体。 .eot(Embedded Open Type)为IE 的私有字体格式。Safari3.1 开始支持.ttf(TrueType)和.otf(OpenType)。未来.woff(Web Open Font Format)将会取代.ttf(TrueType)和.otf(OpenType)两种字体格式 示例代码： 12345@font-face &#123; font-family: &apos;diyfont&apos;; src: url(&apos;diyfont.eot&apos;); /* IE9+ */ src: url(&apos;diyfont.eot?#iefix&apos;) format(&apos;embedded-opentype&apos;), /* IE6-IE8 */ url(&apos;diyfont.woff&apos;) format(&apos;woff&apos;), /*chrome、firefox */ url(&apos;diyfont.ttf&apos;) format(&apos;truetype&apos;), /*chrome、firefox、opera、Safari, Android, iOS 4.2+*/ url(&apos;diyfont.svg#fontname&apos;) format(&apos;svg&apos;); /* iOS 4.1- */ &#125; 另外， 还有其他几种@ 规则， 如@import/@charset/@namespace/@page/@supports/@document 等，这几类规则用的比较少，具体可以查看CSS 参考手册：http://www.css88.com/book/css/","categories":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/younghf.github.io/categories/前端/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"http://yoursite.com/younghf.github.io/tags/CSS/"}],"keywords":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/younghf.github.io/categories/前端/"}]},{"title":"HTML标签","slug":"html","date":"2017-12-01T04:44:27.000Z","updated":"2017-12-01T06:52:51.736Z","comments":true,"path":"2017/12/01/html/","link":"","permalink":"http://yoursite.com/younghf.github.io/2017/12/01/html/","excerpt":"","text":"HTML常用标签汇总 关于各类标签及其用法，参考下面网站链接：HTML 参考手册：http://www.runoob.com/tags/html-reference.htmlHTML 字符实体参考手册：http://www.runoob.com/tags/ref-entities.htmlHTML有许多不同的版本，在此只介绍HTML5，主流浏览器都兼容HTML5 的新标签，对于IE8 及以下版本不认识HTML5 的新元素，可以使用JavaScript 创建一个没用的元素来解决，例如：&lt;script&gt;document.createElement(“header”);&lt;/script&gt;，也可以使用shiv 来解决兼容性问题，详情可参考HTML5 Shiv。 标签规则 HTML 标签是由尖括号包围的关键词，比如 HTML 标签通常是成对出现的，比如&lt;b&gt; 和&lt;/b&gt;（ 当然也有例外，比如表示换行的单标签：&lt;/br&gt; ） 标签对中的第一个标签是开始标签，第二个标签是结束标签 开始和结束标签也被称为开放标签和闭合标签 标签书写规范 标签统一用小写 属性值用双引号 嵌套缩进 HTML 常用属性（全局属性） id class style title 具体内容，可以参考：HTML 全局属性：http://www.runoob.com/tags/ref-standardattributes.html HTML 标签语义化： 标签的用途：语义化，让网页更好的被搜索引擎理解。什么叫做语义化呢？说的通俗点就是：明白每个标签的用途（在什么情况下使用此标签合理）比如，网页上的文章的标题就可以用标题标签，网页上的各个栏目的栏目名称也可以使用标题标签。文章中内容的段落就得放在段落标签中，在文章中有想强调的文本，就可以使用em 标签表示强调等等。语义化可以给我们带来什么样的好处呢？ 更容易被搜索引擎收录(SEO) 更容易让屏幕阅读器读出网页内容(可访问性) 代码可读性 文档声明 &lt;!DOCTYPE html&gt; 文档头部 head 标签是页面的“头部”，只能定义一些特殊的内容。一般来说，只有6 个标签能放在&lt;head&gt;标签内： &lt;head&gt;内部标签 说明 &lt;title&gt; 定义网页的标题 &lt;meta&gt; 定义网页的基本信息（供搜索引擎） &lt;style&gt; 定义CSS 样式 &lt;link&gt; 链接外部CSS 文件或脚本文件，以及favicon 样式 &lt;script&gt; 定义脚本语言 &lt;base&gt; 定义页面所有链接的基础定位 文档章节 body header nav aside article section footer h1~h6 文本 1.超链接 &lt;a&gt;&lt;/a&gt; 创建指向另一个文档的链接 创建一个文档内部的锚点 链接到Email地址 2.强调—em,strong 3.span 4.br … 组合内容 1.分区 div 2.段落 p 3.列表 无序列表 ul 12345&lt;ul&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt;&lt;/ul&gt; 有序列表 ol 12345&lt;ol type=&apos;a&apos; start=&apos;2&apos;&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt;&lt;/ol&gt; 自定义列表 dl 1234567&lt;dl&gt; &lt;dt&gt;作者&lt;/dt&gt; &lt;dd&gt;Hoff&lt;/dd&gt; &lt;dd&gt;Bill&lt;/dd&gt; &lt;dt&gt;出版年&lt;/dt&gt; &lt;dd&gt;1991&lt;/dd&gt;&lt;/dl&gt; 4.pre 5.blockquote 嵌入资源 1.img 2.iframe 3.object 4.embed 5.video 6.audio 7.图形图像 canvas svg 8.热点区域 map area 表格 内容较多且重要，请自行查阅相关文档！ 表单 内容较多且重要，请自行查阅相关文档！","categories":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/younghf.github.io/categories/前端/"}],"tags":[{"name":"HTML","slug":"HTML","permalink":"http://yoursite.com/younghf.github.io/tags/HTML/"}],"keywords":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/younghf.github.io/categories/前端/"}]},{"title":"Markdown","slug":"Markdown","date":"2017-11-30T06:27:20.000Z","updated":"2017-11-30T07:14:48.009Z","comments":true,"path":"2017/11/30/Markdown/","link":"","permalink":"http://yoursite.com/younghf.github.io/2017/11/30/Markdown/","excerpt":"","text":"Markdown 语法入门 第一次写博客，也是第一次用Markdown，感觉还不错吧，用的MAC，官网介绍的编辑器是MOU，结果当前的版本还不支持Sierra…所以就用了MacDown界面如下： Markdown用法很简单，语法也很少，简单练习下就可以上手，这里我就不赘述啦，直接丢链接： 简明版 Markdown 语法说明(简体中文版) 完整版 Markdown 语法说明(简体中文版) 掌握了语法就开始你的写作吧。","categories":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/younghf.github.io/categories/工具/"}],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"http://yoursite.com/younghf.github.io/tags/Markdown/"}],"keywords":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/younghf.github.io/categories/工具/"}]},{"title":"Hello World","slug":"hello-world","date":"2017-11-28T08:12:14.240Z","updated":"2017-11-28T08:12:14.240Z","comments":true,"path":"2017/11/28/hello-world/","link":"","permalink":"http://yoursite.com/younghf.github.io/2017/11/28/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[],"keywords":[]}]}