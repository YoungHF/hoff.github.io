{"meta":{"title":null,"subtitle":null,"description":null,"author":"Hoff","url":"http://yoursite.com/younghf.github.io"},"pages":[{"title":"about","date":"2017-11-30T03:04:47.000Z","updated":"2017-11-30T07:12:40.967Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/younghf.github.io/about/index.html","excerpt":"","text":"征服自己的一切弱点，正是一个人伟大的起始！ — Hoff·Young 折腾了许久，终于搭好了自己的博客。希望自己能坚持写下去吧，记录学习中的一点一滴，直到有一天，量变引起质变！"}],"posts":[{"title":"CSS简介","slug":"CSS","date":"2017-12-01T05:22:24.000Z","updated":"2017-12-01T06:33:05.838Z","comments":true,"path":"2017/12/01/CSS/","link":"","permalink":"http://yoursite.com/younghf.github.io/2017/12/01/CSS/","excerpt":"","text":"#CSS 简介 概念：CSS 全称为“层叠样式表(Cascading Style Sheets)”，它主要是用于定义HTML 内容在浏览器内的显示样式，如文字大小、颜色、字体加粗等。 在HTML 中引入CSS 共有3 种方式： 外部样式表 1&lt;head&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;mystyle.css&quot;&gt; &lt;/head&gt; 内部样式表 1&lt;style&gt; hr &#123;color:sienna;&#125; p &#123;margin-left:20px;&#125; body &#123;background-image:url(&quot;images/back40.gif&quot;);&#125; &lt;/style&gt; 内联样式表 由于要将表现和内容混杂在一起，内联样式会损失掉样式表的许多优势。请慎用这种方法，例如当样式仅需要在一个元素上应用一次时。1&lt;p style=&quot;color:sienna;margin-left:20px&quot;&gt;This is a paragraph.&lt;/p&gt; 层叠次序 当同一个HTML 元素被不止一个样式定义时，会使用哪个样式呢？一般而言，所有的样式会根据下面的规则层叠于一个新的虚拟样式表中，其中数字4 拥有最高的优先权。 浏览器缺省设置 外部样式表 内部样式表（位于&lt;head&gt;标签内部） 内联样式（在HTML元素内部） 内联样式&gt; 标签中的样式声明&gt; 外部样式表中的样式声明(或者浏览器中的样式声明（缺省值）) 1提示:如果你使用了外部文件的样式在&lt;head&gt;中也定义了该样式，则内部样式表会取代外部文件的样式。注意上面所总结的优先级是有一个前提：内联式、嵌入式、外部式样式表中css 样式是在的相同权值的 情况下。 CSS语法 CSS 规则由两个主要的部分构成：选择器，以及一条或多条声明: 选择器（selector）通常是您需要改变样式的HTML 元素。 每条声明(Declaration)由一个属性(property)和一个值(value)组成。在英文大括号“｛｝”中的的就是声明。 属性（property）是您希望设置的样式属性（style attribute）。每个属性有一个值。属性和值被冒号分开。 浏览器私有属性 由于CSS3 很多属性尚未成为W3C 标准的一部分，因此每种内核的浏览器都只能识别带有自身私有前缀的CSS3 属性。我们在书写CSS3 代码时，需要在属性前加上浏览器的私有前缀，然后该种内核的浏览器才能识别相应的CSS3 属性。 私有前缀 对应的浏览器 -webkit- chrome 和 safari -moz- Firefox -ms- IE -o- opera 举个例子，假如我们想要使用CSS3 实现半径为10px 的圆角效果的话，就需要这么写： border-radius:10px; -webkit-border-radius:10px; /兼容chrome 和Safari/ -moz-border-radius:10px; /兼容Firefox/ -ms-border-radius:10px; /兼容IE/ -o-border-radius:10px; /兼容opera/ CSS 属性值定义参考资源： https://developer.mozilla.org/zh-CN/docs/Web/CSSValue_definition_syntaxhttp://www.dreamdu.com/css/property_value/ @规则及语法 @media 指定样式表规则用于指定的媒体类型和查询条件。 IE8 及以下只能实现CSS2 中的部分，即只可以设置媒体类型。 代码示例： 1@media screen and (width:800px)&#123; … &#125; @import url(example.css) screen and (width:800px); @keyframes 指定动画名称和动画效果。 定义动画时，简单的动画可以直接使用关键字from 和to，即从一种状态过渡到另一种状态： 代码示例： 12345@keyframes testanimations &#123; from &#123; opacity: 1; &#125; to &#123; opacity: 0; &#125; &#125;@keyframes testanimations &#123; from &#123; transform: translate(0, 0); &#125; 20% &#123; transform: translate(20px, 20px); &#125; 40% &#123; transform: translate(40px, 0); &#125; 60% &#123; transform: translate(60px, 20); &#125; 80% &#123; transform: translate(80px, 0); &#125; to &#123; transform: translate(100px, 20px); &#125; &#125;当然，也可以不使用关键字from 和to，而都使用&lt;percentage&gt;，如将上面的示例代码中的“from”、“to”分别换成“0%”、“100%”。 @font-face 设置嵌入HTML 文档的字体。 需要兼容当前的主流浏览器， 需同时使用TureTpe(.ttf) 、Web Open Font Format(.woff)、Embedded Open Type(.eot)、SVG(.svg)四种字体格式。 嵌入HTML 文档的字体是指将OpenType 字体（压缩的TrueType 字体）文件映射到客户端系统，用来提供HTML 文档使用该字体，或取代客户端系统已有的同名字体。即让客户端显示客户端所没有安装的字体。 .eot(Embedded Open Type)为IE 的私有字体格式。Safari3.1 开始支持.ttf(TrueType)和.otf(OpenType)。未来.woff(Web Open Font Format)将会取代.ttf(TrueType)和.otf(OpenType)两种字体格式 示例代码： 12345@font-face &#123; font-family: &apos;diyfont&apos;; src: url(&apos;diyfont.eot&apos;); /* IE9+ */ src: url(&apos;diyfont.eot?#iefix&apos;) format(&apos;embedded-opentype&apos;), /* IE6-IE8 */ url(&apos;diyfont.woff&apos;) format(&apos;woff&apos;), /*chrome、firefox */ url(&apos;diyfont.ttf&apos;) format(&apos;truetype&apos;), /*chrome、firefox、opera、Safari, Android, iOS 4.2+*/ url(&apos;diyfont.svg#fontname&apos;) format(&apos;svg&apos;); /* iOS 4.1- */ &#125; 另外， 还有其他几种@ 规则， 如@import/@charset/@namespace/@page/@supports/@document 等，这几类规则用的比较少，具体可以查看CSS 参考手册：http://www.css88.com/book/css/","categories":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/younghf.github.io/categories/前端/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"http://yoursite.com/younghf.github.io/tags/CSS/"}],"keywords":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/younghf.github.io/categories/前端/"}]},{"title":"HTML标签","slug":"html","date":"2017-12-01T04:44:27.000Z","updated":"2017-12-01T06:48:13.609Z","comments":true,"path":"2017/12/01/html/","link":"","permalink":"http://yoursite.com/younghf.github.io/2017/12/01/html/","excerpt":"","text":"HTML常用标签汇总 关于各类标签及其用法，参考下面网站链接：HTML 参考手册：http://www.runoob.com/tags/html-reference.htmlHTML 字符实体参考手册：http://www.runoob.com/tags/ref-entities.htmlHTML有许多不同的版本，在此只介绍HTML5，主流浏览器都兼容HTML5 的新标签，对于IE8 及以下版本不认识HTML5 的新元素，可以使用JavaScript 创建一个没用的元素来解决，例如：&lt;script&gt;document.createElement(“header”);&lt;/script&gt;，也可以使用shiv 来解决兼容性问题，详情可参考HTML5 Shiv。 标签规则 HTML 标签是由尖括号包围的关键词，比如 HTML 标签通常是成对出现的，比如&lt;b&gt; 和&lt;/b&gt;（ 当然也有例外，比如表示换行的单标签：&lt;/br&gt; ） 标签对中的第一个标签是开始标签，第二个标签是结束标签 开始和结束标签也被称为开放标签和闭合标签 标签书写规范 标签统一用小写 属性值用双引号 嵌套缩进 HTML 常用属性（全局属性） id class style title 具体内容，可以参考：HTML 全局属性：http://www.runoob.com/tags/ref-standardattributes.html HTML 标签语义化： 标签的用途：语义化，让网页更好的被搜索引擎理解。什么叫做语义化呢？说的通俗点就是：明白每个标签的用途（在什么情况下使用此标签合理）比如，网页上的文章的标题就可以用标题标签，网页上的各个栏目的栏目名称也可以使用标题标签。文章中内容的段落就得放在段落标签中，在文章中有想强调的文本，就可以使用em 标签表示强调等等。语义化可以给我们带来什么样的好处呢？ 更容易被搜索引擎收录(SEO) 更容易让屏幕阅读器读出网页内容(可访问性) 代码可读性 文档声明 &lt;!DOCTYPE html&gt; 文档头部 head 标签是页面的“头部”，只能定义一些特殊的内容。一般来说，只有6 个标签能放在&lt;head&gt;标签内： &lt;head&gt;内部标签 说明 &lt;title&gt; 定义网页的标题 &lt;meta&gt; 定义网页的基本信息（供搜索引擎） &lt;style&gt; 定义CSS 样式 &lt;link&gt; 链接外部CSS 文件或脚本文件，以及favicon 样式 &lt;script&gt; 定义脚本语言 &lt;base&gt; 定义页面所有链接的基础定位 文档章节 body header nav aside article section footer h1~h6 文本 1.超链接 &lt;a&gt;&lt;/a&gt; 创建指向另一个文档的链接 创建一个文档内部的锚点 链接到Email地址 2.强调—em,strong 3.span 4.br … 组合内容 1.分区 div 2.段落 p 3.列表 无序列表 ul 12345&lt;ul&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt;&lt;/ul&gt; 有序列表 ol 12345&lt;ol type=&apos;a&apos; start=&apos;2&apos;&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt;&lt;/ol&gt; 自定义列表 dl 1234567&lt;dl&gt; &lt;dt&gt;作者&lt;/dt&gt; &lt;dd&gt;Hoff&lt;/dd&gt; &lt;dd&gt;Bill&lt;/dd&gt; &lt;dt&gt;出版年&lt;/dt&gt; &lt;dd&gt;1991&lt;/dd&gt;&lt;/dl&gt; 4.pre 5.blockquote 嵌入资源 1.img 2.iframe 3.object 4.embed 5.video 6.audio 7.图形图像 canvas svg 8.热点区域 map area 表格 内容较多且重要，请自行查阅相关文档！ 表单 内容较多且重要，请自行查阅相关文档！","categories":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/younghf.github.io/categories/前端/"}],"tags":[{"name":"HTML","slug":"HTML","permalink":"http://yoursite.com/younghf.github.io/tags/HTML/"}],"keywords":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/younghf.github.io/categories/前端/"}]},{"title":"Markdown","slug":"Markdown","date":"2017-11-30T06:27:20.000Z","updated":"2017-11-30T07:14:48.009Z","comments":true,"path":"2017/11/30/Markdown/","link":"","permalink":"http://yoursite.com/younghf.github.io/2017/11/30/Markdown/","excerpt":"","text":"Markdown 语法入门 第一次写博客，也是第一次用Markdown，感觉还不错吧，用的MAC，官网介绍的编辑器是MOU，结果当前的版本还不支持Sierra…所以就用了MacDown界面如下： Markdown用法很简单，语法也很少，简单练习下就可以上手，这里我就不赘述啦，直接丢链接： 简明版 Markdown 语法说明(简体中文版) 完整版 Markdown 语法说明(简体中文版) 掌握了语法就开始你的写作吧。","categories":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/younghf.github.io/categories/工具/"}],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"http://yoursite.com/younghf.github.io/tags/Markdown/"}],"keywords":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/younghf.github.io/categories/工具/"}]},{"title":"Hello World","slug":"hello-world","date":"2017-11-28T08:12:14.240Z","updated":"2017-11-28T08:12:14.240Z","comments":true,"path":"2017/11/28/hello-world/","link":"","permalink":"http://yoursite.com/younghf.github.io/2017/11/28/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[],"keywords":[]}]}