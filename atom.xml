<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hoff&#39;s blog</title>
  
  
  <link href="/younghf.github.io/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/younghf.github.io/"/>
  <updated>2017-12-05T07:34:12.438Z</updated>
  <id>http://yoursite.com/younghf.github.io/</id>
  
  <author>
    <name>Hoff</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CSS文本</title>
    <link href="http://yoursite.com/younghf.github.io/2017/12/05/CSS%E6%96%87%E6%9C%AC/"/>
    <id>http://yoursite.com/younghf.github.io/2017/12/05/CSS文本/</id>
    <published>2017-12-05T04:01:11.000Z</published>
    <updated>2017-12-05T07:34:12.438Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h1 id="CSS-字体属性"><a href="#CSS-字体属性" class="headerlink" title="CSS 字体属性"></a><a href="http://www.w3school.com.cn/cssref/pr_font_font.asp" target="_blank" rel="noopener">CSS 字体属性</a></h1></blockquote><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>font</td><td>简写属性。作用是把所有针对字体的属性设置在一个声明中。</td></tr><tr><td>font-family</td><td>设置字体系列。</td></tr><tr><td>font-size</td><td>设置字体的尺寸。</td></tr><tr><td>font-style</td><td>设置字体风格。</td></tr><tr><td>font-variant</td><td>以小型大写字体或者正常字体显示文本。</td></tr><tr><td>font-weight</td><td>设置字体的粗细。</td></tr></tbody></table><p>以上具体的属性介绍在此不再赘述。</p><p><img src="/younghf.github.io/younghf.github.io/2017/12/05/CSS文本/font.jpg" alt="font 缩写"></p><p>如上图，灰色的属性表示不常用，其中font-size、font-family为必填项，所以最后两种缩写的方式是不起作用的。</p><blockquote><h3 id="Line-height–行间距（行高）"><a href="#Line-height–行间距（行高）" class="headerlink" title="Line-height–行间距（行高）"></a>Line-height–行间距（行高）</h3></blockquote><p>line-height: normal | &lt;number&gt; | &lt;length&gt; | &lt;percentage&gt;</p><p><strong>注意：&lt;percentage&gt;是先计算后继承，<number>是直接继承</number></strong></p><blockquote><h3 id="Color-颜色"><a href="#Color-颜色" class="headerlink" title="Color 颜色"></a>Color 颜色</h3></blockquote><p>检索或设置对象的文本颜色。无默认值。</p><p>可以使用Color Name(颜色名称), HEX（十六进制颜色）, RGB, RGBA, HSL, HSLA, transparent<br>来指定color。</p><p><strong>注意，用颜色名称指定color 可能不被一些浏览器接受。</strong></p><p>color 属性值被间接用来提供一个中间值currentColor 以供其他接受颜色值的属性使用。</p><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">div &#123;border: 10px solid;color: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如上代码，没有定义边框的颜色，但定义了color 的颜色为red，那么这时red 将会作为一<br>个间接值currentColor 提供给边框颜色属性，所以最终边框色也为red。</p><blockquote><h3 id="Text-align-文本对齐方式"><a href="#Text-align-文本对齐方式" class="headerlink" title="Text-align 文本对齐方式"></a>Text-align 文本对齐方式</h3></blockquote><p>text-align 属性规定元素中的文本的水平对齐方式。<strong>只能针对文本文字和img 标签，对其他标签无效。</strong></p><p>该属性通过指定行框与哪个点对齐，从而设置块级元素内文本的水平对齐方式。通过允许用户代理调整行<br>内容中字母和字之间的间隔，可以支持值justify；不同用户代理可能会得到不同的结果。</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>默认值</td><td>如果direction 属性是ltr，则默认值是left；如果direction 是rtl，则为right。</td></tr><tr><td>left</td><td>把文本排列到左边。默认值：由浏览器决定。</td></tr><tr><td>right</td><td>把文本排列到右边。</td></tr><tr><td>center</td><td>把文本排列到中间。</td></tr><tr><td>justify</td><td>实现两端对齐文本效果。</td></tr><tr><td>inherit</td><td>规定应该从父元素继承text-align 属性的值。</td></tr></tbody></table><blockquote><h3 id="vertical-align-垂直对齐方式"><a href="#vertical-align-垂直对齐方式" class="headerlink" title="vertical-align 垂直对齐方式"></a>vertical-align 垂直对齐方式</h3></blockquote><p>该属性定义<strong>行内元素</strong>的基线相对于该元素所在行的基线的垂直对齐。允许指定负长度值和百分比值。这会<br>使元素降低而不是升高。在表单元格中，这个属性会设置单元格框中的单元格内容的对齐方式。</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>baseline</td><td>默认。元素放置在父元素的基线上。</td></tr><tr><td>sub</td><td>垂直对齐文本的下标。</td></tr><tr><td>super</td><td>垂直对齐文本的上标</td></tr><tr><td>top</td><td>把元素的顶端与行中最高元素的顶端对齐</td></tr><tr><td>text-top</td><td>把元素的顶端与父元素字体的顶端对齐</td></tr><tr><td>middle</td><td>把此元素放置在父元素的中部。</td></tr><tr><td>bottom</td><td>把元素的顶端与行中最低的元素的顶端对齐。</td></tr><tr><td>text-bottom</td><td>把元素的底端与父元素字体的底端对齐。</td></tr><tr><td>length</td><td></td></tr><tr><td>%</td><td>使用”line-height” 属性的百分比值来排列此元素。允许使用负值。</td></tr><tr><td>inherit</td><td>规定应该从父元素继承vertical-align 属性的值。</td></tr></tbody></table><blockquote><h3 id="Text-indent-设置首行缩进"><a href="#Text-indent-设置首行缩进" class="headerlink" title="Text-indent  设置首行缩进"></a>Text-indent  设置首行缩进</h3></blockquote><p>中文文字中的段前习惯空两个文字的空白，这个特殊的样式可以用下面代码来实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p&#123;text-indent:2em;&#125;</span><br></pre></td></tr></table></figure><blockquote><h3 id="文本格式处理"><a href="#文本格式处理" class="headerlink" title="文本格式处理"></a>文本格式处理</h3></blockquote><ol><li><p>White-space</p><p> white-space 属性设置如何处理元素内的空白（空白符）。</p></li></ol><table><thead><tr><th>可能值</th><th>描述</th></tr></thead><tbody><tr><td>normal</td><td>默认。空白会被浏览器忽略。丢掉多余的空白符，换行字符（回车）会转换为空格，一行中多个空格的序列也会转换为一个空格。</td></tr><tr><td>pre</td><td>空白会被浏览器保留。其行为方式类似HTML 中的&lt;pre&gt; 标签。</td></tr><tr><td>nowrap</td><td>文本不会换行，文本会在在同一行上继续，直到遇到&lt;br&gt; 标签为止。</td></tr><tr><td>pre-wrap</td><td>保留空白符序列，但是正常地进行换行。</td></tr><tr><td>pre-line</td><td>合并空白符序列，但是保留换行符。</td></tr><tr><td>inherit</td><td>规定应该从父元素继承white-space 属性的值。</td></tr></tbody></table><p>white-space 属性的行为：</p><table><thead><tr><th>值</th><th>空白符</th><th>换行符</th><th>自动换行</th></tr></thead><tbody><tr><td>pre-line</td><td>合并</td><td>保留</td><td>允许</td></tr><tr><td>normal</td><td>合并</td><td>忽略</td><td>允许</td></tr><tr><td>nowrap</td><td>合并</td><td>忽略</td><td>不允许</td></tr><tr><td>pre</td><td>保留</td><td>保留</td><td>不允许</td></tr><tr><td>pre-wrap</td><td>保留</td><td>保留</td><td>允许</td></tr></tbody></table><ol><li><p>Word-wrap</p><p> word-wrap 属性允许长单词或 URL 地址换行到下一行。一般情况下，如果你开发的是英文网站，就很有可能用到word-wrap 这个属性了。</p><p> 语法:</p><p> word-wrap: normal | break-word;</p></li><li><p>Word-break</p><p> 设置或检索对象内文本的字内换行行为。</p><p> 对于解决防止页面中出现连续无意义的长字符打破布局，应该使用break-all 属性值；</p><p> 语法：</p><p> word-break：normal | keep-all | break-all</p><p> 默认值：normal</p><p> 取值：</p><ul><li>normal：依照亚洲语言和非亚洲语言的文本规则，允许在字内换行。</li><li>keep-all：与所有非亚洲语言的normal 相同。对于中文，韩文，日文，不允许字断开。<br>适合包含少量亚洲文本的非亚洲文本。</li><li>break-all：该行为与亚洲语言的normal 相同。也允许非亚洲语言文本行的任意字内断<br>开。该值适合包含一些非亚洲文本的亚洲文本，比如使连续的英文字母间断行。</li></ul></li><li><p>Text-decoration -文本修饰</p></li></ol><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>none</td><td>默认值，可以用这个属性值也可以去掉已经有下划线或删除线或顶划线的样式</td></tr><tr><td>underline</td><td>下划线</td></tr><tr><td>line-through</td><td>删除线</td></tr><tr><td>overline</td><td>顶划线</td></tr></tbody></table><p>underline 会对元素加下划线，就像HTML 中的U 元素一样。overline 的作用恰好相反，会在文本的<br>顶端画一个上划线。值line-through 则在文本中间画一个贯穿线，等价于HTML 中的S 和strike 元<br>素。</p><p>none 值会关闭原本应用到一个元素上的所有装饰。通常，无装饰的文本是默认外观，但也不总是这样。<br>例如，链接默认地会有下划线。如果您希望去掉超链接的下划线，可以使用以下CSS 来做到这一点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a &#123;text-decoration: none;&#125;</span><br></pre></td></tr></table></figure><ol><li><p>Text-shadow 文字阴影</p><p> 语法：text-shadow:x-offset y-offset blur color;</p><p> 说明：</p><ul><li>x-offset：（水平阴影）表示阴影的水平偏移距离，单位可以是px、em 或者百分比等。<br>如果值为正，则阴影向右偏移；如果值为负，则阴影向左偏移；</li><li>y-offset：（垂直阴影）表示阴影的垂直偏移距离，单位可以是px、em 或者百分比等。<br>如果值为正，则阴影向下偏移；如果值为负，则阴影向上偏移；</li><li>blur：（模糊距离）表示阴影的模糊程度，单位可以是px、em 或者百分比等。blur 值<br>不能为负。如果值越大，则阴影越模糊；如果值越小，则阴影越清晰。当然，如果不需<br>要阴影模糊效果，可以把blur 值设置为0；</li><li><p>color：（阴影的颜色）表示阴影的颜色。</p><p>在CSS3 中，可以使用text-shadow 属性来给文字指定多个阴影，并且针对每个阴影使用不<br>同的颜色。也就是说，text-shadow 属性可以为一个以英文逗号隔开的“值列表”，如：<br>text-shadow:0 0 4px white, 0 -5px 4px #ff3, 2px -10px 6px #fd3;<br>当text-shadow 属性值为“值列表”时，阴影效果会按照给定的值顺序应用到该元素的文本<br>上，因此有可能出现互相覆盖的现象。但是text-shadow 属性永远不会覆盖文本本身，阴影<br>效果也不会改变边框的尺寸。</p></li></ul></li><li><p>text-stroke 属性</p><p> 语法：text-stroke:宽度值颜色值;</p><p> 在CSS3 中，我们可以使用text-stroke 属性为文字添加描边效果。这个描边效果，<br>说白了就是<strong>给文字添加边框</strong>。</p></li><li><p>text-overflow 属性</p><p> 在CSS3 中，文本溢出text-overflow 用于设置是否使用一个省略标记（…）标示<br>对象内文本的溢出。</p></li></ol><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>ellipsis</td><td>当对象内文本溢出时显示省略标记（…）</td></tr><tr><td>clip</td><td>当对象内文本溢出时不显示省略标记（…），而是将溢出的部分裁切掉</td></tr></tbody></table><p>单独使用text-overflow 属性是无法得到上面图1 效果的。因为text-overflow 属性只是说<br>明文字溢出时用什么方式显示，要实现溢出时产生省略号效果，还须定义2 个内容：</p><ul><li>（1）white-space:nowrap;（强制文本在一行内显示）；</li><li>（2）overflow:hidden;（溢出内容为隐藏）；</li></ul><p>下面是实现文字溢出时产生省略号效果的完整语法：</p><p>```<br>text-overflow:ellipsis;<br>overflow:hidden;<br>white-space:nowrap;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">这3 个属性是必须一起使用才会有效果。</span><br><span class="line"></span><br><span class="line">8. Cursor 属性</span><br><span class="line">在CSS 中，使用cursor 属性来定义鼠标的样式。</span><br><span class="line">语法：cursor:属性值;</span><br><span class="line">cursor 属性取值如下，默认值为default。在实际开发中，我们一般只用到“default”和“pointer”这两个属性值，其他的一般都很少用得上，无需记忆。</span><br><span class="line"></span><br><span class="line">![cursor.jpg](cursor.jpg)</span><br><span class="line"></span><br><span class="line">9. Inherit 属性该值使得属性能够继承祖先设置。</span><br><span class="line">inherit 属于CSS-wide 关键字，这表示所有的属性都可以接受该值。</span><br><span class="line">如何让一个不具备继承特性的属性可以继承父元素的定义？</span><br><span class="line">示例代码：</span><br><span class="line"></span><br><span class="line">```div &#123;position: relative;&#125;div a &#123;position: inherit;&#125;</span><br></pre></td></tr></table></figure></p><pre><code>上述代码，超链接a 将会继承父元素的position 定义，也会定义为relative。</code></pre><p>常用的CSS 属性继承性：</p><p><img src="/younghf.github.io/younghf.github.io/2017/12/05/CSS文本/Inherit.jpg" alt="Inherit.jpg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h1 id=&quot;CSS-字体属性&quot;&gt;&lt;a href=&quot;#CSS-字体属性&quot; class=&quot;headerlink&quot; title=&quot;CSS 字体属性&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.w3school.com.cn/cssref/pr_fon
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/younghf.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="CSS文本" scheme="http://yoursite.com/younghf.github.io/tags/CSS%E6%96%87%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>CSS选择器</title>
    <link href="http://yoursite.com/younghf.github.io/2017/12/01/CSS%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    <id>http://yoursite.com/younghf.github.io/2017/12/01/CSS选择器/</id>
    <published>2017-12-01T07:42:19.000Z</published>
    <updated>2017-12-01T16:33:25.437Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h1 id="CSS-选择器"><a href="#CSS-选择器" class="headerlink" title="CSS 选择器"></a>CSS 选择器</h1></blockquote><p>选择器，说白了就是用一种方式把你想要的那一个标签选中！把它选中了，你才能操作这个标签的CSS 样式。CSS 有很多把你所需要的标签选中的方式，这些不同的方式就是不同的选择器。</p><p>选择器的不同，在于它选择方式不同，但是他们的目的都是相同的，那就是把你需要的标签选中，然后让你定义该标签的CSS 样式。当然，你也有可能会用某一种选择器代替另一种选择器，这仅仅是由于选择方式不一样罢了，目的还是一样的。</p><blockquote><h3 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h3></blockquote><p>标签选择器其实就是html 代码中的标签。例如下面代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p&#123;font-size:12px;line-height:1.6em;&#125;</span><br></pre></td></tr></table></figure><p>上面的css 样式代码的作用：为p 标签设置12px 字号，行间距设置1.6em 的样式。</p><blockquote><h3 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h3></blockquote><p>语法：<br>.选择器名称{css 样式代码;}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.selector&#123;color:red;&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>英文圆点开头</li><li>其中类选器名称可以任意起名（但不要起中文噢）</li></ol><blockquote><h3 id="ID-选择器"><a href="#ID-选择器" class="headerlink" title="ID 选择器"></a>ID 选择器</h3></blockquote><p>语法：<br>#选择器名称{css 样式代码;}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#selector&#123;color:red;&#125;</span><br></pre></td></tr></table></figure><blockquote><h1 id="类和ID-选择器的区别"><a href="#类和ID-选择器的区别" class="headerlink" title="类和ID 选择器的区别"></a>类和ID 选择器的区别</h1></blockquote><p>相同点：可以应用于任何元素</p><p>不同点：</p><ol><li>ID 选择器只能在文档中使用一次。与类选择器不同，在一个HTML 文档中，ID 选择器只能使用一次，而且仅一次。而类选择器可以使用多次。</li><li>可以使用类选择器词列表方法为一个元素同时设置多个样式。我们可以为一个元素同时设多个样式，但只可以用类选择器的方法实现，ID 选择器是不可以的（不能使用ID 词列表）。</li></ol><blockquote><h1 id="通用选择器（通配符选择器）"><a href="#通用选择器（通配符选择器）" class="headerlink" title="通用选择器（通配符选择器）"></a>通用选择器（通配符选择器）</h1></blockquote><p>通用选择器是功能最强大的选择器，它使用一个（*）号指定，它的作用是匹配html 中所有标签元素，如下使用下面代码使用html 中任意标签元素字体颜色全部设置为红色：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*&#123;color:red;&#125;</span><br></pre></td></tr></table></figure><blockquote><h1 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h1></blockquote><table><thead><tr><th>选择器</th><th>描述</th></tr></thead><tbody><tr><td>[attribute]</td><td>用于选取带有指定属性的元素。</td></tr><tr><td>[attribute=value]</td><td>用于选取带有指定属性和值的元素。</td></tr><tr><td>[attribute~=value]</td><td>用于选取属性值中包含指定词汇的元素。</td></tr><tr><td>[attribute丨=value]</td><td>用于选取带有以指定值开头的属性值的元素，该值必须是整个单词。</td></tr><tr><td>[attribute^=value]</td><td>匹配属性值以指定值开头的每个元素。</td></tr><tr><td>[attribute$=value]</td><td>匹配属性值以指定值结尾的每个元素。</td></tr><tr><td>[attribute*=value]</td><td>匹配属性值中包含指定值的每个元素。</td></tr></tbody></table><p>实例展示：</p><p>html 代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;xxx.pdf&quot;&gt;我链接的是PDF 文件&lt;/a&gt;&lt;a href=&quot;#&quot; class=&quot;icon&quot;&gt;我类名是icon&lt;/a&gt;&lt;a href=&quot;#&quot; title=&quot;我的title 是more&quot;&gt;我的title 是more&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>css 代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a[class^=icon]&#123;background: green;color:#fff;&#125;a[href$=pdf]&#123;background: orange;color: #fff;&#125;a[title*=more]&#123;background: blue;color: #fff;&#125;</span><br></pre></td></tr></table></figure><p>结果显示：</p><p><img src="/younghf.github.io/younghf.github.io/2017/12/01/CSS选择器/code.jpg" alt="code.jpg"></p><blockquote><h3 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h3></blockquote><p>CSS 伪类用于向某些选择器添加特殊的效果。又叫伪类选择符，它允许给html 不存在的标签（标签<br>的某种状态）设置样式，比如说我们给html 中一个标签元素的鼠标滑过的状态来设置字体颜色：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a:hover&#123;color:red;&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>描述</th><th>CSS</th></tr></thead><tbody><tr><td>:focus</td><td>向拥有键盘输入焦点的元素添加样式。</td><td>2</td></tr><tr><td>:hover</td><td>当鼠标悬浮在元素上方时，向元素添加样式。</td><td>1</td></tr><tr><td>:link</td><td>向未被访问的链接添加样式。</td><td>1</td></tr><tr><td>:visited</td><td>向已被访问的链接添加样式。</td><td>1</td></tr><tr><td>:first-child</td><td>向元素的第一个子元素添加样式。</td><td>2</td></tr><tr><td>:lang</td><td>向带有指定lang 属性的元素添加样式。</td><td>2</td></tr><tr><td>:enabled</td><td>匹配每个启用的元素（主要用于表单元素）。</td><td>3</td></tr><tr><td>:disabled</td><td>匹配每个禁用的元素（主要用于表单元素）。</td><td>3</td></tr><tr><td>:checked</td><td>匹配每个已被选中的 input 元素（只用于单选按钮和复选框）。</td><td>3</td></tr></tbody></table><blockquote><h3 id="结构伪类选择器"><a href="#结构伪类选择器" class="headerlink" title="结构伪类选择器"></a>结构伪类选择器</h3></blockquote><p>是针对HTML 层次“结构”的伪类选择器。例如我们想要某一个父元素下面的第n 个子元素。</p><p><img src="/younghf.github.io/younghf.github.io/2017/12/01/CSS选择器/table.jpg" alt="table.jpg"></p><p><strong>总结：</strong> “:first-child”是选择父元素下的第1 个子元素（不区分元素类型），而“:first-of-type”是选择父元素下某个元素类型的第1 个子元素（区分元素类型）。</p><blockquote><h3 id="UI-元素状态伪类选择器"><a href="#UI-元素状态伪类选择器" class="headerlink" title="UI 元素状态伪类选择器"></a>UI 元素状态伪类选择器</h3></blockquote><p>UI，是用户界面（User Interface）的意思。所谓的UI 设计是指对软件的人机交互、操作<br>逻辑、界面美观的综合设计。</p><p>UI 元素状态包括：可用、不可用、选中、未选中、获取焦点、失去焦点等。<br>这些选择器的共同特征是：指定的样式只有当元素处于某种状态下时才起作用，在默认状态<br>下不起作用。UI 元素状态伪类选择器大多数都是针对表单元素来使用的。</p><table><thead><tr><th>选择器</th><th>说明</th></tr></thead><tbody><tr><td>E:focus</td><td>指定元素获得光标焦点时使用的样式</td></tr><tr><td>E:checked</td><td>选择E 元素中所有被选中的元素</td></tr><tr><td>E::selection</td><td>改变E 元素中被选择的网页文本的显示效果</td></tr><tr><td>E:enabled</td><td>选择E 元素中所有“可用”元素</td></tr><tr><td>E:disabled</td><td>选择E 元素中所有“不可用”元素</td></tr><tr><td>E:read-write</td><td>选择E 元素中所有“可读写”元素</td></tr><tr><td>E:read-only</td><td>选择E 元素中所有“只读”元素</td></tr><tr><td>E::before</td><td>在E 元素之前插入内容</td></tr><tr><td>E::after</td><td>在E 元素之后插入内容</td></tr></tbody></table><blockquote><h3 id="CSS-伪元素选择器"><a href="#CSS-伪元素选择器" class="headerlink" title="CSS 伪元素选择器"></a>CSS 伪元素选择器</h3></blockquote><table><thead><tr><th>选择器</th><th>说明</th></tr></thead><tbody><tr><td>::first-letter</td><td>向文本的第一个字母添加特殊样式</td></tr><tr><td>::first-line</td><td>向文本的首行添加特殊样式</td></tr><tr><td>::before</td><td>在元素之前添加内容</td></tr><tr><td>::after</td><td>在元素之后添加内容</td></tr><tr><td>::selection</td><td>改变元素中被选择的网页文本的显示效果</td></tr></tbody></table><blockquote><h3 id="CSS-组合选择器"><a href="#CSS-组合选择器" class="headerlink" title="CSS 组合选择器"></a>CSS 组合选择器</h3></blockquote><ol><li><p>子选择器:</p><p> 即大于符号(&gt;),用于选择指定标签元素的第一代子元素。如下代码：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.food&gt;li&#123;border:1px solid red;&#125;</span><br></pre></td></tr></table></figure><p> 这行代码会使class 名为food 下的子元素li 加入红色实线边框。</p></li><li><p>包含(后代)选择器:</p><p> 即加入空格,用于选择指定标签元素下的后辈元素。如下代码：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.first span&#123;color:red;&#125;</span><br></pre></td></tr></table></figure></li></ol><pre><code>请注意这个选择器与子选择器的区别，子选择器（child selector）仅是指它的直接后代，或者你可以理解为作用于子元素的第一代后代。而后代选择器是作用于所有子后代元素。后代选择器通过空格来进行选择，而子选择器是通过“&gt;”进行选择。**总结：** &gt;作用于元素的第一代后代，空格作用于元素的所有后代。</code></pre><ol><li><p>相邻选择器:</p><p> 相邻选择器只会命中符合条件的相邻的兄弟元素，使用“+”号。</p><p> 如：p+p{color:#f00;}<br> 即设置与p 元素相邻的p 元素的颜色。</p></li><li><p>兄弟选择器</p><p> 兄弟选择器会命中所有符合条件的兄弟元素，而不强制是紧邻的元素，使用“~”符号</p><p> 如：p~p{color:#f00;}</p></li><li><p>群组选择器</p><p> 群组选择器，就是同时对几个选择器进行相同的操作。</p><p> 语法：h3,div,p,span{color:red;}</p></li></ol><blockquote><h3 id="CSS-继承"><a href="#CSS-继承" class="headerlink" title="CSS 继承"></a>CSS 继承</h3></blockquote><p>CSS 的某些样式是具有继承性的，那么什么是继承呢？继承是一种规则，它允许样式不仅应<br>用于某个特定html 标签元素，而且应用于其后代。比如下面代码：如某种颜色应用于p 标<br>签，这个颜色设置不仅应用p 标签，还应用于p 标签中的所有子元素文本，这里子元素为<br>span 标签。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p&#123;color:red;&#125;&lt;p&gt;三年级时，我还是一个&lt;span&gt;胆小如鼠&lt;/span&gt;的小女孩。&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>注意: 有一些css 样式是不具有继承性的。如border:1px solid red;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p&#123;border:1px solid red;&#125;&lt;p&gt;三年级时，我还是一个&lt;span&gt;胆小如鼠&lt;/span&gt;的小女孩。&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>在上面例子中它代码的作用只是给p 标签设置了边框为1 像素、红色、实心边框线，而对于子元素span 是没用起到作用的。</p><blockquote><h3 id="CSS-优先级（特殊性）"><a href="#CSS-优先级（特殊性）" class="headerlink" title="CSS 优先级（特殊性）"></a>CSS 优先级（特殊性）</h3></blockquote><p>CSS 的优先级也可以称为CSS 的特殊性(specificity)或权值:对于每个样式表规则,浏览器都会计算选择器的特殊性,从而使元素属性声明在有冲突的情况下能够正确显示.<br>有的时候我们为同一个元素设置了不同的CSS 样式代码，那么元素会启用哪一个CSS 样式呢?</p><p>我们来看一下面的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p&#123;color:red;&#125;.first&#123;color:green;&#125;&lt;p class=&quot;first&quot;&gt;三年级时，我还是一个&lt;span&gt;胆小如鼠&lt;/span&gt;的小女孩。&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>p 和.first 都匹配到了p 这个标签上，那么会显示哪种颜色呢？green 是正确的颜色，那么为什么呢？是因为浏览器是根据权值来判断使用哪种css 样式的，权值高的就使用哪种css样式。</p><p><strong>权值的规则：</strong>标签的权值为1，类选择符的权值为10，ID 选择符的权值最高为100。</p><p>例如下面的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p&#123;color:red;&#125; /*权值为1*/p span&#123;color:green;&#125; /*权值为1+1=2*/.warning&#123;color:white;&#125; /*权值为10*/p span.warning&#123;color:purple;&#125; /*权值为1+1+10=12*/\#footer .note p&#123;color:yellow;&#125; /*权值为100+10+1=111*/</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>还有一个权值比较特殊—继承也有权值但很低，有的文献提出它只有0.1，所以可以理解为继承的权值最低。</p><p>如何改变CSS 的优先级？</p><ol><li>改变CSS 的先后顺序；</li><li>提升权重；</li><li>使用!important.</li></ol><blockquote><h3 id="CSS-层叠"><a href="#CSS-层叠" class="headerlink" title="CSS 层叠"></a>CSS 层叠</h3></blockquote><p>层叠就是在html 文件中对于同一个元素可以有多个css 样式存在，当有相同权重的样式存在时，会根据这些css 样式的前后顺序来决定，处于最后面的css 样式会被应用。</p><p>如下面代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p&#123;color:red;&#125;p&#123;color:green;&#125;&lt;p class=&quot;first&quot;&gt;三年级时，我还是一个&lt;span&gt;胆小如鼠&lt;/span&gt;的小女孩。&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>最后p 中的文本会设置为green，这个层叠很好理解，理解为后面的样式会覆盖前面的样式。</p><p>所以前面的css 样式优先级就不难理解了：</p><p><strong>内联样式表（标签内部）&gt; 嵌入样式表（当前文件中）&gt; 外部样式表（外部文件中）。</strong></p><blockquote><h3 id="重要性-important"><a href="#重要性-important" class="headerlink" title="重要性(!important)"></a>重要性(!important)</h3></blockquote><p>我们在做网页代码的时，有些特殊的情况需要为某些样式设置具有最高权值，怎么办？</p><p>这时候我们可以使用!important 来解决。</p><p>如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p&#123;color:red!important;&#125;p&#123;color:green;&#125;&lt;p class=&quot;first&quot;&gt;三年级时，我还是一个&lt;span&gt;胆小如鼠&lt;/span&gt;的小女孩。&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>这时p 段落中的文本会显示的red 红色。</p><p><strong>注意：</strong>!important 要写在分号的前面这里注意当网页制作者不设置css 样式时，浏览器会按照自己的一套样式来显示网页。并且用户也可以在浏览器中设置自己习惯的样式，比如有的用户习惯把字号设置为大一些，使其查看网页的文本更加清楚。这时注意样式优先级为：</p><p><strong>浏览器默认的样式&lt; 网页制作者样式&lt; 用户自己设置的样式</strong></p><p>但记住!important 优先级样式是个例外，权值高于用户自己设置的样式。</p><p>参考资料：<br><a href="http://www.quirksmode.org/css/selectors/" target="_blank" rel="noopener">http://www.quirksmode.org/css/selectors/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h1 id=&quot;CSS-选择器&quot;&gt;&lt;a href=&quot;#CSS-选择器&quot; class=&quot;headerlink&quot; title=&quot;CSS 选择器&quot;&gt;&lt;/a&gt;CSS 选择器&lt;/h1&gt;&lt;/blockquote&gt;
&lt;p&gt;选择器，说白了就是用一种方式把你想要的那一个标
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/younghf.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="CSS选择器" scheme="http://yoursite.com/younghf.github.io/tags/CSS%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>CSS简介</title>
    <link href="http://yoursite.com/younghf.github.io/2017/12/01/CSS/"/>
    <id>http://yoursite.com/younghf.github.io/2017/12/01/CSS/</id>
    <published>2017-12-01T05:22:24.000Z</published>
    <updated>2017-12-01T16:31:18.765Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h1 id="CSS-简介"><a href="#CSS-简介" class="headerlink" title="CSS 简介"></a>CSS 简介</h1></blockquote><ol><li>概念：CSS 全称为“层叠样式表(Cascading Style Sheets)”，它主要是用于定义HTML 内容在浏览器内的显示样式，如文字大小、颜色、字体加粗等。</li><li>在HTML 中引入CSS 共有3 种方式：</li></ol><ul><li>外部样式表 </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;mystyle.css&quot;&gt;&lt;/head&gt;</span><br></pre></td></tr></table></figure><ul><li>内部样式表     </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;hr &#123;color:sienna;&#125;p &#123;margin-left:20px;&#125;body &#123;background-image:url(&quot;images/back40.gif&quot;);&#125;&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li>内联样式表</li></ul><p>由于要将表现和内容混杂在一起，内联样式会损失掉样式表的许多优势。请慎用这种方法，例如当样式仅需要在一个元素上应用一次时。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p style=&quot;color:sienna;margin-left:20px&quot;&gt;This is a paragraph.&lt;/p&gt;</span><br></pre></td></tr></table></figure></p><blockquote><h3 id="层叠次序"><a href="#层叠次序" class="headerlink" title="层叠次序"></a>层叠次序</h3></blockquote><p>当同一个HTML 元素被不止一个样式定义时，会使用哪个样式呢？<br>一般而言，所有的样式会根据下面的规则层叠于一个新的虚拟样式表中，其中数字4 拥有最高的优先权。</p><ol><li>浏览器缺省设置</li><li>外部样式表</li><li>内部样式表（位于&lt;head&gt;标签内部）</li><li>内联样式（在HTML元素内部）</li></ol><p>内联样式&gt; 标签中的样式声明&gt; 外部样式表中的样式声明(或者浏览器中的样式声明（缺省值）)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">提示:如果你使用了外部文件的样式在&lt;head&gt;中也定义了该样式，则内部样式表会取代外部文件的样式。注意上面所总结的优先级是有一个前提：内联式、嵌入式、外部式样式表中css 样式是在的相同权值的情况下。</span><br></pre></td></tr></table></figure><blockquote><h3 id="CSS语法"><a href="#CSS语法" class="headerlink" title="CSS语法"></a>CSS语法</h3></blockquote><p><img src="/younghf.github.io/younghf.github.io/2017/12/01/CSS/grammar.jpg" alt="grammar"></p><p>CSS 规则由两个主要的部分构成：选择器，以及一条或多条声明:</p><p>选择器（selector）通常是您需要改变样式的HTML 元素。</p><p>每条声明(Declaration)由一个属性(property)和一个值(value)组成。在英文大括号“｛｝”中的的就是声明。</p><p>属性（property）是您希望设置的样式属性（style attribute）。每个属性有一个值。属<br>性和值被冒号分开。</p><blockquote><h3 id="浏览器私有属性"><a href="#浏览器私有属性" class="headerlink" title="浏览器私有属性"></a>浏览器私有属性</h3></blockquote><p>由于CSS3 很多属性尚未成为W3C 标准的一部分，因此每种内核的浏览器都只能<br>识别带有自身私有前缀的CSS3 属性。我们在书写CSS3 代码时，需要在属性前加上浏<br>览器的私有前缀，然后该种内核的浏览器才能识别相应的CSS3 属性。</p><table><thead><tr><th>私有前缀</th><th style="text-align:center">对应的浏览器</th></tr></thead><tbody><tr><td>-webkit-</td><td style="text-align:center">chrome 和 safari</td></tr><tr><td>-moz-</td><td style="text-align:center">Firefox</td></tr><tr><td>-ms-</td><td style="text-align:center">IE</td></tr><tr><td>-o-</td><td style="text-align:center">opera</td></tr></tbody></table><p>举个例子，假如我们想要使用CSS3 实现半径为10px 的圆角效果的话，就需要这么写：</p><p>border-radius:10px;</p><p>-webkit-border-radius:10px; /<em>兼容chrome 和Safari</em>/</p><p>-moz-border-radius:10px; /<em>兼容Firefox</em>/</p><p>-ms-border-radius:10px; /<em>兼容IE</em>/</p><p>-o-border-radius:10px; /<em>兼容opera</em>/</p><p>CSS 属性值定义参考资源：</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSSValue_definition_syntax" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/CSSValue_definition_syntax</a><br><a href="http://www.dreamdu.com/css/property_value/" target="_blank" rel="noopener">http://www.dreamdu.com/css/property_value/</a></p><blockquote><h3 id="规则及语法"><a href="#规则及语法" class="headerlink" title="@规则及语法"></a>@规则及语法</h3></blockquote><ol><li><p>@media 指定样式表规则用于指定的媒体类型和查询条件。</p><p> IE8 及以下只能实现CSS2 中的部分，即只可以设置媒体类型。</p><p> 代码示例：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@media screen and (width:800px)&#123; … &#125;@import url(example.css) screen and (width:800px);</span><br></pre></td></tr></table></figure></li><li><p>@keyframes 指定动画名称和动画效果。</p><p> 定义动画时，简单的动画可以直接使用关键字from 和to，即从一种状态过渡到另一种状态：<br> 代码示例：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@keyframes testanimations &#123;from &#123; opacity: 1; &#125;to &#123; opacity: 0; &#125;&#125;</span><br><span class="line"></span><br><span class="line">@keyframes testanimations &#123;from &#123; transform: translate(0, 0); &#125;20% &#123; transform: translate(20px, 20px); &#125;40% &#123; transform: translate(40px, 0); &#125;60% &#123; transform: translate(60px, 20); &#125;80% &#123; transform: translate(80px, 0); &#125;to &#123; transform: translate(100px, 20px); &#125;&#125;</span><br><span class="line"></span><br><span class="line">当然，也可以不使用关键字from 和to，而都使用&lt;percentage&gt;，如将上面的示例代码中的“from”、“to”分别换成“0%”、“100%”。</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>@font-face 设置嵌入HTML 文档的字体。</p><p> 需要兼容当前的主流浏览器， 需同时使用TureTpe(.ttf) 、Web Open Font Format(.woff)、Embedded Open Type(.eot)、SVG(.svg)四种字体格式。</p><p> 嵌入HTML 文档的字体是指将OpenType 字体（压缩的TrueType 字体）文件映射到客户端系统，用来提供HTML 文档使用该字体，或取代客户端系统已有的同名字体。即让客户端显示客户端所没有安装的字体。</p><p> .eot(Embedded Open Type)为IE 的私有字体格式。Safari3.1 开始支持.ttf(TrueType)和.otf(OpenType)。未来.woff(Web Open Font Format)将会取代.ttf(TrueType)和.otf(OpenType)两种字体格式</p><p> 示例代码：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@font-face &#123;font-family: &apos;diyfont&apos;;src: url(&apos;diyfont.eot&apos;);</span><br><span class="line"> /* IE9+ */src: url(&apos;diyfont.eot?#iefix&apos;) format(&apos;embedded-opentype&apos;),</span><br><span class="line"> /* IE6-IE8 */url(&apos;diyfont.woff&apos;) format(&apos;woff&apos;),</span><br><span class="line"> /*chrome、firefox */url(&apos;diyfont.ttf&apos;) format(&apos;truetype&apos;),</span><br><span class="line"> /*chrome、firefox、opera、Safari, Android, iOS 4.2+*/url(&apos;diyfont.svg#fontname&apos;) format(&apos;svg&apos;);/* iOS 4.1- */&#125;</span><br></pre></td></tr></table></figure><p> 另外， 还有其他几种@ 规则， 如@import/@charset/@namespace/@page/@supports/@document 等，这几类规则用的比较少，具体可以查看CSS 参考手册：<br><a href="http://www.css88.com/book/css/" target="_blank" rel="noopener">http://www.css88.com/book/css/</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h1 id=&quot;CSS-简介&quot;&gt;&lt;a href=&quot;#CSS-简介&quot; class=&quot;headerlink&quot; title=&quot;CSS 简介&quot;&gt;&lt;/a&gt;CSS 简介&lt;/h1&gt;&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;概念：CSS 全称为“层叠样式表(Casc
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/younghf.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="CSS" scheme="http://yoursite.com/younghf.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>HTML标签</title>
    <link href="http://yoursite.com/younghf.github.io/2017/12/01/html/"/>
    <id>http://yoursite.com/younghf.github.io/2017/12/01/html/</id>
    <published>2017-12-01T04:44:27.000Z</published>
    <updated>2017-12-01T06:52:51.736Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h1 id="HTML常用标签汇总"><a href="#HTML常用标签汇总" class="headerlink" title="HTML常用标签汇总"></a>HTML常用标签汇总</h1></blockquote><p>关于各类标签及其用法，参考下面网站链接：<br><br>HTML 参考手册：<br><a href="http://www.runoob.com/tags/html-reference.html" target="_blank" rel="noopener">http://www.runoob.com/tags/html-reference.html</a><br><br>HTML 字符实体参考手册：<a href="http://www.runoob.com/tags/ref-entities.html" target="_blank" rel="noopener">http://www.runoob.com/tags/ref-entities.html</a><br><br>HTML有许多不同的版本，在此只介绍HTML5，主流浏览器都兼容HTML5 的新标签，对于IE8 及以下版本不认识HTML5 的新元素，可以使用JavaScript 创建一个没用的元素来解决，例如：<br>&lt;script&gt;document.createElement(“header”);&lt;/script&gt;，也可以使用shiv 来解决兼容性问题，详情可参考<a href="https://github.com/afarkas/html5shiv" target="_blank" rel="noopener">HTML5 Shiv</a>。</p><p><img src="/younghf.github.io/younghf.github.io/2017/12/01/html/html_tag.png" alt="html_tag"></p><blockquote><h3 id="标签规则"><a href="#标签规则" class="headerlink" title="标签规则"></a>标签规则</h3></blockquote><ol><li>HTML 标签是由尖括号包围的关键词，比如<html></html></li><li>HTML 标签通常是成对出现的，比如&lt;b&gt; 和&lt;/b&gt;（ 当然也有例外，比如表示换行的单标签：&lt;/br&gt; ）</li><li>标签对中的第一个标签是开始标签，第二个标签是结束标签</li><li>开始和结束标签也被称为开放标签和闭合标签    </li></ol><blockquote><h3 id="标签书写规范"><a href="#标签书写规范" class="headerlink" title="标签书写规范"></a>标签书写规范</h3></blockquote><ol><li>标签统一用小写</li><li>属性值用双引号</li><li>嵌套缩进</li></ol><blockquote><h3 id="HTML-常用属性（全局属性）"><a href="#HTML-常用属性（全局属性）" class="headerlink" title="HTML 常用属性（全局属性）"></a>HTML 常用属性（全局属性）</h3></blockquote><ol><li>id</li><li>class</li><li>style</li><li>title</li></ol><p>具体内容，可以参考：<br><br>HTML 全局属性：<a href="http://www.runoob.com/tags/ref-standardattributes.html" target="_blank" rel="noopener">http://www.runoob.com/tags/ref-standardattributes.html</a></p><blockquote><h3 id="HTML-标签语义化："><a href="#HTML-标签语义化：" class="headerlink" title="HTML 标签语义化："></a>HTML 标签语义化：</h3></blockquote><p>标签的用途：语义化，让网页更好的被搜索引擎理解。<br>什么叫做语义化呢？说的通俗点就是：明白每个标签的用途（在什么情况下使用此标签合理）<br>比如，网页上的文章的标题就可以用标题标签，网页上的各个栏目的栏目名称也可以使用标<br>题标签。文章中内容的段落就得放在段落标签中，在文章中有想强调的文本，就可以使<br>用em 标签表示强调等等。<br>语义化可以给我们带来什么样的好处呢？</p><ul><li>更容易被搜索引擎收录(SEO)</li><li>更容易让屏幕阅读器读出网页内容(可访问性)</li><li>代码可读性</li></ul><blockquote><h3 id="文档声明"><a href="#文档声明" class="headerlink" title="文档声明"></a>文档声明</h3></blockquote><pre><code>&lt;!DOCTYPE html&gt;</code></pre><blockquote><h3 id="文档头部"><a href="#文档头部" class="headerlink" title="文档头部"></a>文档头部</h3></blockquote><pre><code>head 标签是页面的“头部”，只能定义一些特殊的内容。一般来说，只有6 个标签能放在&lt;head&gt;标签内：</code></pre><table><thead><tr><th>&lt;head&gt;内部标签</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td>&lt;title&gt;</td><td style="text-align:center">定义网页的标题</td></tr><tr><td>&lt;meta&gt;</td><td style="text-align:center">定义网页的基本信息（供搜索引擎）</td></tr><tr><td>&lt;style&gt;</td><td style="text-align:center">定义CSS 样式</td></tr><tr><td>&lt;link&gt;</td><td style="text-align:center">链接外部CSS 文件或脚本文件，以及favicon 样式</td></tr><tr><td>&lt;script&gt;</td><td style="text-align:center">定义脚本语言</td></tr><tr><td>&lt;base&gt;</td><td style="text-align:center">定义页面所有链接的基础定位</td></tr></tbody></table><blockquote><h3 id="文档章节"><a href="#文档章节" class="headerlink" title="文档章节"></a>文档章节</h3></blockquote><ol><li>body</li><li>header</li><li>nav</li><li>aside</li><li>article</li><li>section</li><li>footer</li><li>h1~h6</li></ol><p><img src="/younghf.github.io/younghf.github.io/2017/12/01/html/document.jpg" alt="document"></p><blockquote><h3 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h3></blockquote><p>1.超链接</p><ul><li>&lt;a&gt;&lt;/a&gt;<ul><li>创建指向另一个文档的链接</li><li>创建一个文档内部的锚点</li><li>链接到Email地址</li></ul></li></ul><p>2.强调—em,strong</p><p>3.span</p><p>4.br   …</p><blockquote><h3 id="组合内容"><a href="#组合内容" class="headerlink" title="组合内容"></a>组合内容</h3></blockquote><p>1.分区</p><ul><li>div</li></ul><p>2.段落</p><ul><li>p</li></ul><p>3.列表</p><ul><li><p>无序列表 ul</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure></li><li><p>有序列表 ol </p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ol type=&apos;a&apos; start=&apos;2&apos;&gt;</span><br><span class="line">&lt;li&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ol&gt;</span><br></pre></td></tr></table></figure></li><li><p>自定义列表 dl</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;dl&gt;</span><br><span class="line">&lt;dt&gt;作者&lt;/dt&gt;</span><br><span class="line">&lt;dd&gt;Hoff&lt;/dd&gt;</span><br><span class="line">&lt;dd&gt;Bill&lt;/dd&gt;</span><br><span class="line">&lt;dt&gt;出版年&lt;/dt&gt;</span><br><span class="line">&lt;dd&gt;1991&lt;/dd&gt;</span><br><span class="line">&lt;/dl&gt;</span><br></pre></td></tr></table></figure></li></ul><p>4.pre</p><p>5.blockquote</p><blockquote><h3 id="嵌入资源"><a href="#嵌入资源" class="headerlink" title="嵌入资源"></a>嵌入资源</h3></blockquote><p>1.img</p><p>2.iframe</p><p>3.object</p><p>4.embed</p><p>5.video</p><p>6.audio</p><p>7.图形图像</p><ul><li>canvas</li><li>svg</li></ul><p>8.热点区域</p><ul><li>map</li><li>area</li></ul><blockquote><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3></blockquote><p>内容较多且重要，请自行查阅相关文档！</p><blockquote><h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h3></blockquote><p>内容较多且重要，请自行查阅相关文档！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h1 id=&quot;HTML常用标签汇总&quot;&gt;&lt;a href=&quot;#HTML常用标签汇总&quot; class=&quot;headerlink&quot; title=&quot;HTML常用标签汇总&quot;&gt;&lt;/a&gt;HTML常用标签汇总&lt;/h1&gt;&lt;/blockquote&gt;
&lt;p&gt;关于各类标签及其用法，
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/younghf.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="HTML" scheme="http://yoursite.com/younghf.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>Markdown</title>
    <link href="http://yoursite.com/younghf.github.io/2017/11/30/Markdown/"/>
    <id>http://yoursite.com/younghf.github.io/2017/11/30/Markdown/</id>
    <published>2017-11-30T06:27:20.000Z</published>
    <updated>2017-11-30T07:14:48.009Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h1 id="Markdown-语法入门"><a href="#Markdown-语法入门" class="headerlink" title="Markdown 语法入门"></a>Markdown 语法入门</h1></blockquote><p>第一次写博客，也是第一次用Markdown，感觉还不错吧，用的MAC，官网介绍的编辑器是MOU，结果当前的版本还不支持Sierra…所以就用了<strong><a href="http://macdown.uranusjr.com/" target="_blank" rel="noopener">MacDown</a></strong>界面如下：</p><p><img src="/younghf.github.io/younghf.github.io/2017/11/30/Markdown/MacDown.png" alt="MacDown"></p><p>Markdown用法很简单，语法也很少，简单练习下就可以上手，这里我就不赘述啦，直接丢链接：</p><ul><li><p>简明版 <a href="http://wowubuntu.com/markdown/basic.html" target="_blank" rel="noopener">Markdown 语法说明(简体中文版)</a></p></li><li><p>完整版 <a href="http://wowubuntu.com/markdown/index.html" target="_blank" rel="noopener">Markdown 语法说明(简体中文版)</a></p></li></ul><p>掌握了语法就开始你的写作吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h1 id=&quot;Markdown-语法入门&quot;&gt;&lt;a href=&quot;#Markdown-语法入门&quot; class=&quot;headerlink&quot; title=&quot;Markdown 语法入门&quot;&gt;&lt;/a&gt;Markdown 语法入门&lt;/h1&gt;&lt;/blockquote&gt;
&lt;p
      
    
    </summary>
    
      <category term="工具" scheme="http://yoursite.com/younghf.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Markdown" scheme="http://yoursite.com/younghf.github.io/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/younghf.github.io/2017/11/28/hello-world/"/>
    <id>http://yoursite.com/younghf.github.io/2017/11/28/hello-world/</id>
    <published>2017-11-28T08:12:14.240Z</published>
    <updated>2017-11-28T08:12:14.240Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
